#!/bin/bash
#
# Copyright (c) 2017, Richard Mortier <mort@cantab.net>
# @license LICENSE.txt
#
# Dockerise Mirage CLI

set -e
## debug
# set -xv
# PS4='$LINENO: '

usage() {
  echo "$0 usage:"
  sed -nE "s/[[:space:]]+([[:alpha:]]+)) .* # ([[:print:]]*) .*$/  \1: \2/p" $0
  exit 0;
}

declare -r ME="$(basename $0)"
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z') $ME]: $@" >&2
}
die() {
  rc=$1
  shift
  err $@
  exit $rc
}

declare -r CONTAINER=.mirage.container
declare -r IMAGE=.mirage.image

_exec() {
  docker exec -ti $(cat "$CONTAINER" 2>/dev/null) opam config exec -- "$@"
}
_mirage() {
  _exec mirage "$@"
}

DOCKER_FLAGS+=" --volume $(pwd -P):/cwd --entrypoint /bin/sh"

init () {
  destroy
  if [[ -z "$1" ]]; then
    echo mor1/mirage >| $IMAGE
  else
    echo "$1" >| $IMAGE
  fi

  echo $(docker create --tty --interactive $DOCKER_FLAGS $(cat "$IMAGE")
    ) >| $CONTAINER
  docker start $(cat "$CONTAINER")

  _exec opam update -yu
}

publish () {
  if [ ! -s "$CONTAINER" ]; then
    die 1 "no running container"
  fi

  docker commit $(cat "$CONTAINER") "$1"
  docker push "$1"
  echo "$1" >| $IMAGE
}

destroy() {
  if [ -s "$CONTAINER" ]; then
    if [[ -n $(cat "$CONTAINER") ]]; then
      docker stop -t 2 $(cat "$CONTAINER") || true
      docker rm $(cat "$CONTAINER") || true
    fi
  fi
  rm -f "$CONTAINER"
}

configure () {
  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage configure "$@"
  _exec make depends
}

clean () {
  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage clean "$@"
}

build () {
  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage build "$@"
}

run () {
  _exec "$@"
}

command=$1
if [[ -z "$command" ]]; then
  usage
fi
shift

case "$command" in
  init) init "$@" ;; # initialise, $1 indicates base image
  publish) publish "$@" ;; # commit image and publish at $1
  destroy) destroy "$@" ;; # destroy any running containers and clean up
  run) run "$@" ;; # run command inside container

  configure) configure "$@" ;; # mirage configure $@ && make depends
  build) build "$@" ;; # mirage build $@
  clean) clean "$@" ;; # mirage clean

  *) usage ;;
esac
