#!/bin/bash
#
# Copyright (c) 2017, Richard Mortier <mort@cantab.net>
# @license LICENSE.txt
#
# Dockerise Mirage CLI

set -e
## debug
if [[ "$DOMMAGE_DEBUG" = "true" ]]; then
  set -x
  PS4='$LINENO: '
fi

usage() {
  echo "$0 usage:"
  sed -nE "s/[[:space:]]+([[:alpha:]]+)) .* # ([[:print:]]*) .*$/  \1: \2/p" $0
  echo "--dommage-chdir=[dir] changes container dir before executing command"
  exit 0;
}

declare -r ME="$(basename $0)"
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z') $ME]: $@" >&2
}
die() {
  rc=$1
  shift
  err "$@"
  exit $rc
}

declare -r CONTAINER=.mirage.container
declare -r IMAGE=.mirage.image

_exec() {
  local chdir=$1
  shift
  docker exec --tty --interactive \
         $(cat "$CONTAINER" 2>/dev/null) \
         bash -c "cd $chdir && opam config exec -- $*"
}
_mirage() {
  local chdir=$1
  shift
  _exec $chdir mirage "$@"
}

_DFLAGS=$DOCKER_FLAGS
DOCKER_FLAGS="--volume $(pwd -P):/cwd $_DFLAGS --entrypoint /bin/sh"

init () {
  destroy
  if [[ -z "$1" ]]; then
    echo mor1/mirage >| $IMAGE
  else
    echo "$1" >| $IMAGE
  fi

  echo $(docker create --tty --interactive $DOCKER_FLAGS $(cat "$IMAGE")
    ) >| $CONTAINER
  docker start $(cat "$CONTAINER")

  _exec . opam update -yu
}

publish () {
  if [ ! -s "$CONTAINER" ]; then
    die 1 "no running container"
  fi

  docker commit $(cat "$CONTAINER") "$1"
  docker push "$1"
  echo "$1" >| $IMAGE
}

destroy() {
  if [ -s "$CONTAINER" ]; then
    if [[ -n $(cat "$CONTAINER") ]]; then
      docker stop -t 2 $(cat "$CONTAINER") || true
      docker rm $(cat "$CONTAINER") || true
    fi
  fi
  rm -f "$CONTAINER"
}

run () {
  local chdir=$1
  shift
  _exec "$chdir" "$@"
}

configure () {
  local chdir=$1
  shift

  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage "$chdir" configure "$@"
  _exec "$chdir" make depends
}

clean () {
  local chdir=$1
  shift

  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage "$chdir" clean "$@"
}

build () {
  local chdir=$1
  shift

  if [ ! -s "$CONTAINER" ]; then
    init $(cat "$IMAGE")
  fi

  _mirage "$chdir" build "$@"
}

ARGS=
chdir=.
while [[ $# > 0 ]]; do
  OPTIND=1
  while getopts -- "-:" optchar; do
      case "$optchar" in
      -)
        case "$OPTARG" in
          dommage-chdir)
            chdir="$2"
            shift 2
            break
            ;;
          dommage-chdir=*)
            chdir=${OPTARG#*=}
            shift
            break
            ;;
          *)
            ARGS="$ARGS $1"
            shift
            break
            ;;
        esac
        break
        ;;
      *)
        ARGS="$ARGS $1"
        shift
        break
        ;;
    esac
    done
  while [[ $# > 0 && ${1:0:2} != "--" ]]; do
    ARGS="$ARGS $1"
    shift
  done
done

set -- $ARGS

command=$1
if [[ -z "$command" ]]; then
  usage
fi
shift

case "$command" in
  init) init "$@" ;; # initialise, $1 indicates base image
  publish) publish "$@" ;; # commit image and publish at $1
  destroy) destroy "$@" ;; # destroy any running containers and clean up

  run) run "$chdir" "$@" ;; # run command inside container
  configure) configure "$chdir" "$@" ;; # mirage configure $@ && make depends
  build) build "$chdir" "$@" ;; # mirage build $@
  clean) clean "$chdir" "$@" ;; # mirage clean

  *) usage ;;
esac
